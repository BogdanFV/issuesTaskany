// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Quarter {
  Q1
  Q2
  Q3
  Q4
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String     @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            Role       @default(USER)
  created_at      DateTime   @default(now())
  updated_at      DateTime   @default(now()) @updatedAt
  comments        Comment[]
  reactions       Reaction[]
  teams           Team[]
  teamParticipant Team[]     @relation("teamParticipants")
  goalParticipant Goal[]     @relation("goalParticipants")
  goalOwner       Goal[]     @relation("goalOwner")
  goalIssuer      Goal[]     @relation("goalIssuer")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  parent       Team?    @relation("parentChildren", fields: [id], references: [id])
  children     Team[]   @relation("parentChildren")
  owner        User?    @relation(fields: [owner_id], references: [id])
  owner_id     String?
  participants User[]   @relation("teamParticipants")

  @@index([owner_id])
}

model Goal {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  key          Boolean
  personal     Boolean
  private      Boolean
  year         String[]
  quarter      Quarter[]
  estimate     DateTime?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now()) @updatedAt
  criteria     Criteria[]
  issuer       User?      @relation("goalIssuer", fields: [issuer_id], references: [id])
  issuer_id    String?
  owner        User?      @relation("goalOwner", fields: [owner_id], references: [id])
  owner_id     String?
  participants User[]     @relation("goalParticipants")
  comments     Comment[]
  reactions    Reaction[]
  dependsOn    Goal[]     @relation("dependsOn")
  blocks       Goal[]     @relation("dependsOn")
  relatedTo    Goal[]     @relation("connected")
  connected    Goal[]     @relation("connected")

  @@index([owner_id])
  @@index([issuer_id])
}

model Criteria {
  id         String   @id @default(cuid())
  title      String
  done       Boolean
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  goal       Goal     @relation(fields: [goal_id], references: [id])
  goal_id    Int

  @@index([goal_id])
}

model Comment {
  id          String     @id @default(cuid())
  description String
  author      User       @relation(fields: [author_id], references: [id])
  author_id   String
  goal        Goal       @relation(fields: [goal_id], references: [id])
  goal_id     Int
  reactions   Reaction[]

  @@index([author_id])
  @@index([goal_id])
}

model Reaction {
  id         String   @id @default(cuid())
  emoji      String
  author     User     @relation(fields: [author_id], references: [id])
  author_id  String
  goal       Goal?    @relation(fields: [goal_id], references: [id])
  goal_id    Int?
  comment    Comment? @relation(fields: [comment_id], references: [id])
  comment_id String?

  @@index([author_id])
  @@index([goal_id])
  @@index([comment_id])
}
